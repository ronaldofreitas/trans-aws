import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CreateCallAnalyticsCategoryRequest, CreateCallAnalyticsCategoryResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface CreateCallAnalyticsCategoryCommandInput extends CreateCallAnalyticsCategoryRequest {
}
export interface CreateCallAnalyticsCategoryCommandOutput extends CreateCallAnalyticsCategoryResponse, __MetadataBearer {
}
/**
 * <p>Creates an analytics category. Amazon Transcribe applies the conditions specified by your
 *             analytics categories to your call analytics jobs. For each analytics category, you specify one or
 *             more rules. For example, you can specify a rule that the customer sentiment was neutral or
 *             negative within that category. If you start a call analytics job, Amazon Transcribe applies the
 *             category to the analytics job that you've specified.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, CreateCallAnalyticsCategoryCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, CreateCallAnalyticsCategoryCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new CreateCallAnalyticsCategoryCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateCallAnalyticsCategoryCommandInput} for command's `input` shape.
 * @see {@link CreateCallAnalyticsCategoryCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for command's `input` shape.
 *
 */
export declare class CreateCallAnalyticsCategoryCommand extends $Command<CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: CreateCallAnalyticsCategoryCommandInput;
    constructor(input: CreateCallAnalyticsCategoryCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput>;
    private serialize;
    private deserialize;
}
