import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput } from "./commands/CreateCallAnalyticsCategoryCommand";
import { CreateLanguageModelCommandInput, CreateLanguageModelCommandOutput } from "./commands/CreateLanguageModelCommand";
import { CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput } from "./commands/CreateMedicalVocabularyCommand";
import { CreateVocabularyCommandInput, CreateVocabularyCommandOutput } from "./commands/CreateVocabularyCommand";
import { CreateVocabularyFilterCommandInput, CreateVocabularyFilterCommandOutput } from "./commands/CreateVocabularyFilterCommand";
import { DeleteCallAnalyticsCategoryCommandInput, DeleteCallAnalyticsCategoryCommandOutput } from "./commands/DeleteCallAnalyticsCategoryCommand";
import { DeleteCallAnalyticsJobCommandInput, DeleteCallAnalyticsJobCommandOutput } from "./commands/DeleteCallAnalyticsJobCommand";
import { DeleteLanguageModelCommandInput, DeleteLanguageModelCommandOutput } from "./commands/DeleteLanguageModelCommand";
import { DeleteMedicalTranscriptionJobCommandInput, DeleteMedicalTranscriptionJobCommandOutput } from "./commands/DeleteMedicalTranscriptionJobCommand";
import { DeleteMedicalVocabularyCommandInput, DeleteMedicalVocabularyCommandOutput } from "./commands/DeleteMedicalVocabularyCommand";
import { DeleteTranscriptionJobCommandInput, DeleteTranscriptionJobCommandOutput } from "./commands/DeleteTranscriptionJobCommand";
import { DeleteVocabularyCommandInput, DeleteVocabularyCommandOutput } from "./commands/DeleteVocabularyCommand";
import { DeleteVocabularyFilterCommandInput, DeleteVocabularyFilterCommandOutput } from "./commands/DeleteVocabularyFilterCommand";
import { DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput } from "./commands/DescribeLanguageModelCommand";
import { GetCallAnalyticsCategoryCommandInput, GetCallAnalyticsCategoryCommandOutput } from "./commands/GetCallAnalyticsCategoryCommand";
import { GetCallAnalyticsJobCommandInput, GetCallAnalyticsJobCommandOutput } from "./commands/GetCallAnalyticsJobCommand";
import { GetMedicalTranscriptionJobCommandInput, GetMedicalTranscriptionJobCommandOutput } from "./commands/GetMedicalTranscriptionJobCommand";
import { GetMedicalVocabularyCommandInput, GetMedicalVocabularyCommandOutput } from "./commands/GetMedicalVocabularyCommand";
import { GetTranscriptionJobCommandInput, GetTranscriptionJobCommandOutput } from "./commands/GetTranscriptionJobCommand";
import { GetVocabularyCommandInput, GetVocabularyCommandOutput } from "./commands/GetVocabularyCommand";
import { GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput } from "./commands/GetVocabularyFilterCommand";
import { ListCallAnalyticsCategoriesCommandInput, ListCallAnalyticsCategoriesCommandOutput } from "./commands/ListCallAnalyticsCategoriesCommand";
import { ListCallAnalyticsJobsCommandInput, ListCallAnalyticsJobsCommandOutput } from "./commands/ListCallAnalyticsJobsCommand";
import { ListLanguageModelsCommandInput, ListLanguageModelsCommandOutput } from "./commands/ListLanguageModelsCommand";
import { ListMedicalTranscriptionJobsCommandInput, ListMedicalTranscriptionJobsCommandOutput } from "./commands/ListMedicalTranscriptionJobsCommand";
import { ListMedicalVocabulariesCommandInput, ListMedicalVocabulariesCommandOutput } from "./commands/ListMedicalVocabulariesCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListTranscriptionJobsCommandInput, ListTranscriptionJobsCommandOutput } from "./commands/ListTranscriptionJobsCommand";
import { ListVocabulariesCommandInput, ListVocabulariesCommandOutput } from "./commands/ListVocabulariesCommand";
import { ListVocabularyFiltersCommandInput, ListVocabularyFiltersCommandOutput } from "./commands/ListVocabularyFiltersCommand";
import { StartCallAnalyticsJobCommandInput, StartCallAnalyticsJobCommandOutput } from "./commands/StartCallAnalyticsJobCommand";
import { StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput } from "./commands/StartMedicalTranscriptionJobCommand";
import { StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput } from "./commands/StartTranscriptionJobCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateCallAnalyticsCategoryCommandInput, UpdateCallAnalyticsCategoryCommandOutput } from "./commands/UpdateCallAnalyticsCategoryCommand";
import { UpdateMedicalVocabularyCommandInput, UpdateMedicalVocabularyCommandOutput } from "./commands/UpdateMedicalVocabularyCommand";
import { UpdateVocabularyCommandInput, UpdateVocabularyCommandOutput } from "./commands/UpdateVocabularyCommand";
import { UpdateVocabularyFilterCommandInput, UpdateVocabularyFilterCommandOutput } from "./commands/UpdateVocabularyFilterCommand";
import { TranscribeClient } from "./TranscribeClient";
/**
 * <p>Operations and objects for transcribing speech to text.</p>
 */
export declare class Transcribe extends TranscribeClient {
    /**
     * <p>Creates an analytics category. Amazon Transcribe applies the conditions specified by your
     *             analytics categories to your call analytics jobs. For each analytics category, you specify one or
     *             more rules. For example, you can specify a rule that the customer sentiment was neutral or
     *             negative within that category. If you start a call analytics job, Amazon Transcribe applies the
     *             category to the analytics job that you've specified.</p>
     */
    createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateCallAnalyticsCategoryCommandOutput>;
    createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, cb: (err: any, data?: CreateCallAnalyticsCategoryCommandOutput) => void): void;
    createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Creates a new custom language model. Use Amazon S3 prefixes to provide the location of your input files. The time it
     *             takes to create your model depends on the size of your training data.</p>
     */
    createLanguageModel(args: CreateLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateLanguageModelCommandOutput>;
    createLanguageModel(args: CreateLanguageModelCommandInput, cb: (err: any, data?: CreateLanguageModelCommandOutput) => void): void;
    createLanguageModel(args: CreateLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLanguageModelCommandOutput) => void): void;
    /**
     * <p>Creates a new custom vocabulary that you can use to modify how Amazon Transcribe Medical transcribes your audio file.</p>
     */
    createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<CreateMedicalVocabularyCommandOutput>;
    createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, cb: (err: any, data?: CreateMedicalVocabularyCommandOutput) => void): void;
    createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Creates a new custom vocabulary that you can use to change the way Amazon Transcribe handles transcription of an
     *             audio file.</p>
     */
    createVocabulary(args: CreateVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<CreateVocabularyCommandOutput>;
    createVocabulary(args: CreateVocabularyCommandInput, cb: (err: any, data?: CreateVocabularyCommandOutput) => void): void;
    createVocabulary(args: CreateVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVocabularyCommandOutput) => void): void;
    /**
     * <p>Creates a new vocabulary filter that you can use to filter words, such as profane words, from the output of
     *             a transcription job.</p>
     */
    createVocabularyFilter(args: CreateVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<CreateVocabularyFilterCommandOutput>;
    createVocabularyFilter(args: CreateVocabularyFilterCommandInput, cb: (err: any, data?: CreateVocabularyFilterCommandOutput) => void): void;
    createVocabularyFilter(args: CreateVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVocabularyFilterCommandOutput) => void): void;
    /**
     * <p>Deletes a call analytics category using its name.</p>
     */
    deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCallAnalyticsCategoryCommandOutput>;
    deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, cb: (err: any, data?: DeleteCallAnalyticsCategoryCommandOutput) => void): void;
    deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Deletes a call analytics job using its name.</p>
     */
    deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCallAnalyticsJobCommandOutput>;
    deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, cb: (err: any, data?: DeleteCallAnalyticsJobCommandOutput) => void): void;
    deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCallAnalyticsJobCommandOutput) => void): void;
    /**
     * <p>Deletes a custom language model using its name.</p>
     */
    deleteLanguageModel(args: DeleteLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLanguageModelCommandOutput>;
    deleteLanguageModel(args: DeleteLanguageModelCommandInput, cb: (err: any, data?: DeleteLanguageModelCommandOutput) => void): void;
    deleteLanguageModel(args: DeleteLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLanguageModelCommandOutput) => void): void;
    /**
     * <p>Deletes a transcription job generated by Amazon Transcribe Medical and any related information.</p>
     */
    deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMedicalTranscriptionJobCommandOutput>;
    deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, cb: (err: any, data?: DeleteMedicalTranscriptionJobCommandOutput) => void): void;
    deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMedicalTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Deletes a vocabulary from Amazon Transcribe Medical.</p>
     */
    deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMedicalVocabularyCommandOutput>;
    deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, cb: (err: any, data?: DeleteMedicalVocabularyCommandOutput) => void): void;
    deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Deletes a previously submitted transcription job along with any other generated results such as the
     *             transcription, models, and so on.</p>
     */
    deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTranscriptionJobCommandOutput>;
    deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, cb: (err: any, data?: DeleteTranscriptionJobCommandOutput) => void): void;
    deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Deletes a vocabulary from Amazon Transcribe. </p>
     */
    deleteVocabulary(args: DeleteVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVocabularyCommandOutput>;
    deleteVocabulary(args: DeleteVocabularyCommandInput, cb: (err: any, data?: DeleteVocabularyCommandOutput) => void): void;
    deleteVocabulary(args: DeleteVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVocabularyCommandOutput) => void): void;
    /**
     * <p>Removes a vocabulary filter.</p>
     */
    deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVocabularyFilterCommandOutput>;
    deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, cb: (err: any, data?: DeleteVocabularyFilterCommandOutput) => void): void;
    deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVocabularyFilterCommandOutput) => void): void;
    /**
     * <p>Gets information about a single custom language model. Use this information to see details about the
     *             language model in your Amazon Web Services account. You can also see whether the base language model used
     *             to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a
     *             new custom language model using the updated base model. If the language model wasn't created, you can use this
     *             operation to understand why Amazon Transcribe couldn't create it. </p>
     */
    describeLanguageModel(args: DescribeLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLanguageModelCommandOutput>;
    describeLanguageModel(args: DescribeLanguageModelCommandInput, cb: (err: any, data?: DescribeLanguageModelCommandOutput) => void): void;
    describeLanguageModel(args: DescribeLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLanguageModelCommandOutput) => void): void;
    /**
     * <p>Retrieves information about a call analytics category.</p>
     */
    getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<GetCallAnalyticsCategoryCommandOutput>;
    getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, cb: (err: any, data?: GetCallAnalyticsCategoryCommandOutput) => void): void;
    getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Returns information about a call analytics job. To see the status of the job, check the
     *             <code>CallAnalyticsJobStatus</code> field. If the status is <code>COMPLETED</code>, the job
     *             is finished and you can find the results at the location specified in the <code>TranscriptFileUri</code>
     *             field. If you enable personally identifiable information (PII) redaction, the redacted transcript appears
     *             in the <code>RedactedTranscriptFileUri</code> field.</p>
     */
    getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<GetCallAnalyticsJobCommandOutput>;
    getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, cb: (err: any, data?: GetCallAnalyticsJobCommandOutput) => void): void;
    getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCallAnalyticsJobCommandOutput) => void): void;
    /**
     * <p>Returns information about a transcription job from Amazon Transcribe Medical. To see the status of the job, check the
     *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished. You
     *             find the results of the completed job in the <code>TranscriptFileUri</code> field.</p>
     */
    getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<GetMedicalTranscriptionJobCommandOutput>;
    getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, cb: (err: any, data?: GetMedicalTranscriptionJobCommandOutput) => void): void;
    getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMedicalTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Retrieves information about a medical vocabulary.</p>
     */
    getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<GetMedicalVocabularyCommandOutput>;
    getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, cb: (err: any, data?: GetMedicalVocabularyCommandOutput) => void): void;
    getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Returns information about a transcription job. To see the status of the job, check the
     *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished and
     *             you can find the results at the location specified in the <code>TranscriptFileUri</code> field. If you enable content
     *             redaction, the redacted transcript appears in <code>RedactedTranscriptFileUri</code>.</p>
     */
    getTranscriptionJob(args: GetTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<GetTranscriptionJobCommandOutput>;
    getTranscriptionJob(args: GetTranscriptionJobCommandInput, cb: (err: any, data?: GetTranscriptionJobCommandOutput) => void): void;
    getTranscriptionJob(args: GetTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Gets information about a vocabulary. </p>
     */
    getVocabulary(args: GetVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<GetVocabularyCommandOutput>;
    getVocabulary(args: GetVocabularyCommandInput, cb: (err: any, data?: GetVocabularyCommandOutput) => void): void;
    getVocabulary(args: GetVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVocabularyCommandOutput) => void): void;
    /**
     * <p>Returns information about a vocabulary filter.</p>
     */
    getVocabularyFilter(args: GetVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<GetVocabularyFilterCommandOutput>;
    getVocabularyFilter(args: GetVocabularyFilterCommandInput, cb: (err: any, data?: GetVocabularyFilterCommandOutput) => void): void;
    getVocabularyFilter(args: GetVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVocabularyFilterCommandOutput) => void): void;
    /**
     * <p>Provides more information about the call analytics categories that you've created. You
     *             can use the information in this list to find a specific category. You can then use the
     *              operation to get more information about it.</p>
     */
    listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListCallAnalyticsCategoriesCommandOutput>;
    listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, cb: (err: any, data?: ListCallAnalyticsCategoriesCommandOutput) => void): void;
    listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCallAnalyticsCategoriesCommandOutput) => void): void;
    /**
     * <p>List call analytics jobs with a specified status or substring that matches their names.</p>
     */
    listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListCallAnalyticsJobsCommandOutput>;
    listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, cb: (err: any, data?: ListCallAnalyticsJobsCommandOutput) => void): void;
    listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCallAnalyticsJobsCommandOutput) => void): void;
    /**
     * <p>Provides more information about the custom language models you've created. You can use the information in
     *             this list to find a specific custom language model. You can then use the
     *              operation to get more information about it.</p>
     */
    listLanguageModels(args: ListLanguageModelsCommandInput, options?: __HttpHandlerOptions): Promise<ListLanguageModelsCommandOutput>;
    listLanguageModels(args: ListLanguageModelsCommandInput, cb: (err: any, data?: ListLanguageModelsCommandOutput) => void): void;
    listLanguageModels(args: ListLanguageModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLanguageModelsCommandOutput) => void): void;
    /**
     * <p>Lists medical transcription jobs with a specified status or substring that matches their names.</p>
     */
    listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListMedicalTranscriptionJobsCommandOutput>;
    listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, cb: (err: any, data?: ListMedicalTranscriptionJobsCommandOutput) => void): void;
    listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMedicalTranscriptionJobsCommandOutput) => void): void;
    /**
     * <p>Returns a list of vocabularies that match the specified criteria. If you don't enter a value in any of the request
     *             parameters, returns the entire list of vocabularies.</p>
     */
    listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, options?: __HttpHandlerOptions): Promise<ListMedicalVocabulariesCommandOutput>;
    listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, cb: (err: any, data?: ListMedicalVocabulariesCommandOutput) => void): void;
    listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMedicalVocabulariesCommandOutput) => void): void;
    /**
     * <p>Lists all tags associated with a given transcription job, vocabulary, or resource.</p>
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * <p>Lists transcription jobs with the specified status.</p>
     */
    listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTranscriptionJobsCommandOutput>;
    listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, cb: (err: any, data?: ListTranscriptionJobsCommandOutput) => void): void;
    listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTranscriptionJobsCommandOutput) => void): void;
    /**
     * <p>Returns a list of vocabularies that match the specified criteria. If no criteria are specified, returns the entire list
     *             of vocabularies.</p>
     */
    listVocabularies(args: ListVocabulariesCommandInput, options?: __HttpHandlerOptions): Promise<ListVocabulariesCommandOutput>;
    listVocabularies(args: ListVocabulariesCommandInput, cb: (err: any, data?: ListVocabulariesCommandOutput) => void): void;
    listVocabularies(args: ListVocabulariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVocabulariesCommandOutput) => void): void;
    /**
     * <p>Gets information about vocabulary filters.</p>
     */
    listVocabularyFilters(args: ListVocabularyFiltersCommandInput, options?: __HttpHandlerOptions): Promise<ListVocabularyFiltersCommandOutput>;
    listVocabularyFilters(args: ListVocabularyFiltersCommandInput, cb: (err: any, data?: ListVocabularyFiltersCommandOutput) => void): void;
    listVocabularyFilters(args: ListVocabularyFiltersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVocabularyFiltersCommandOutput) => void): void;
    /**
     * <p>Starts an asynchronous analytics job that not only transcribes the audio recording of a caller and agent, but
     *             also returns additional insights. These insights include how quickly or loudly the caller or agent was speaking. To
     *             retrieve additional insights with your analytics jobs, create categories. A category is a way to classify analytics jobs
     *             based on attributes, such as a customer's sentiment or a particular phrase being used during the call. For more
     *             information, see the  operation. </p>
     */
    startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<StartCallAnalyticsJobCommandOutput>;
    startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, cb: (err: any, data?: StartCallAnalyticsJobCommandOutput) => void): void;
    startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCallAnalyticsJobCommandOutput) => void): void;
    /**
     * <p>Starts a batch job to transcribe medical speech to text.</p>
     */
    startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartMedicalTranscriptionJobCommandOutput>;
    startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, cb: (err: any, data?: StartMedicalTranscriptionJobCommandOutput) => void): void;
    startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMedicalTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Starts an asynchronous job to transcribe speech to text.</p>
     */
    startTranscriptionJob(args: StartTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartTranscriptionJobCommandOutput>;
    startTranscriptionJob(args: StartTranscriptionJobCommandInput, cb: (err: any, data?: StartTranscriptionJobCommandOutput) => void): void;
    startTranscriptionJob(args: StartTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Tags a Amazon Transcribe resource with the given list of tags.</p>
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * <p>Removes specified tags from a specified Amazon Transcribe resource.</p>
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    /**
     * <p>Updates the call analytics category with new values. The <code>UpdateCallAnalyticsCategory</code>
     *             operation overwrites all of the existing information with the values that you provide in the request. </p>
     */
    updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCallAnalyticsCategoryCommandOutput>;
    updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, cb: (err: any, data?: UpdateCallAnalyticsCategoryCommandOutput) => void): void;
    updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Updates a vocabulary with new values that you provide in a different text file from the one you used to create
     *             the vocabulary. The <code>UpdateMedicalVocabulary</code> operation overwrites all of the existing information
     *             with the values that you provide in the request.</p>
     */
    updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMedicalVocabularyCommandOutput>;
    updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, cb: (err: any, data?: UpdateMedicalVocabularyCommandOutput) => void): void;
    updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Updates an existing vocabulary with new values. The <code>UpdateVocabulary</code> operation overwrites
     *             all of the existing information with the values that you provide in the request. </p>
     */
    updateVocabulary(args: UpdateVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVocabularyCommandOutput>;
    updateVocabulary(args: UpdateVocabularyCommandInput, cb: (err: any, data?: UpdateVocabularyCommandOutput) => void): void;
    updateVocabulary(args: UpdateVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVocabularyCommandOutput) => void): void;
    /**
     * <p>Updates a vocabulary filter with a new list of filtered words.</p>
     */
    updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVocabularyFilterCommandOutput>;
    updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, cb: (err: any, data?: UpdateVocabularyFilterCommandOutput) => void): void;
    updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVocabularyFilterCommandOutput) => void): void;
}
